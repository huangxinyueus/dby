/**
 * 寮虹儓鎺ㄨ崘闈欐€佸垎绫汇€傚彲浠ュ姞蹇€熷害!!!
 * 涓嶅缓璁 :
 * 浼犲弬 ?type=url&params=../json/閲囬泦.json
 * 寤鸿锛 
 * 浼犲弬 ?type=url&params=../json/閲囬泦闈欐€ .json$1
 * 浼犲弬 ?type=url&params=../json/閲囬泦[zy]闈欐€ .json$1
 * 浼犲弬 ?type=url&params=../json/閲囬泦[瀵哴闈欐€ .json$1
 * hipy-server鏀寔@鏀瑰悕姣斿:
 * 浼犲弬 ?type=url&params=../json/閲囬泦闈欐€ .json$1@閲囩帇閬撻暱[鍚圿
 * 浼犲弬 ?type=url&params=../json/閲囬泦[zy]闈欐€ .json$1@閲囩帇zy[瀵哴
 * 浼犲弬 ?type=url&params=../json/閲囬泦[瀵哴闈欐€ .json@閲囩帇鎴愪汉[瀵哴
 * [{"name":"鏆撮璧勬簮","url":"https://bfzyapi.com","parse_url":""},{"name":"椋炲垁璧勬簮","url":"http://www.feidaozy.com","parse_url":""},{"name":"榛戞湪鑰宠祫婧 ","url":"https://www.heimuer.tv","parse_url":""}]
 */
globalThis.getRandomItem = function (items) {//浠庡垪琛ㄩ殢鏈哄彇鍑轰竴涓厓绱 
    return items[Math.random() * items.length | 0];
}
var rule = {
    title: '閲囬泦涔嬬帇[鍚圿',
    author: '閬撻暱',
    version: '20240705 beta16',
    update_info: `
20240705:
1.鏀寔浼犲弬json鍚庨潰澧炲姞$1 杩欐牱鐨勯澶栨爣璇嗭紝鐢ㄤ簬鎼滅储缁撴灉绮惧噯鍖归厤
2.鏀寔浼犲弬json鍚庨潰澧炲姞$1$1 杩欐牱鐨勯澶栨爣璇嗭紝鐢ㄤ簬寮哄埗鑾峰彇鎼滅储鍥剧墖銆 $1$涓嶆樉绀哄浘鐗囥€傞粯璁ゆ槸鎼滅储寮哄埗鏈夊浘鐗囩殑[宸插疄鐜拌鎯呴〉璇锋眰浣跨敤鎵归噺]
3.淇浜岀骇鏁版嵁鏃犲簭鍖归厤鎼滅储鍒楄〃鍥剧墖鐨勯棶棰 
4.淇敼鎼滅储绮惧噯鍜屽浘鐗囨樉绀洪澶栧弬鏁伴棿闅旂浠 #鍙樹负$
20240703:
1.閲囬泦json鏀寔"searchable": 0,鐢ㄤ簬鎼滅储鏃舵帓闄よ繖涓簮
20240604:
1.棣栭〉鎺ㄨ崘鍙栨秷纭帶绛夊緟銆傚鍔犻殢鏈烘帹鑽愬姛鑳姐€ 
2.棣栭〉鎺ㄨ崘鏂板鏇存柊鏃ュ織鏌ョ湅鍔熻兘
銆愮壒鍒鏄庛€戠洰鍓嶅彧鏀寔鏍囧噯json鏍煎紡鐨勯噰闆嗙珯(璧勬簮绔欎竴鑸兘鎻愪緵xml鍜宩son涓ょ鎺ュ彛锛岀洰鍓嶆病鏈夋敮鎸亁ml鐨勬兂娉曪紝娌′粈涔堝繀瑕 )
鏈変簺璧勬簮绔欑殑json鎺ュ彛涓嶆槸鏍囧噯鐨 /api.php/provide/vod/,闇€瑕佽嚜宸卞湪閲囬泦闈欐€ .json涓紪杈戝搴旂殑api灞炴€у～鍐欐瘮濡 :/api.php/provide/vod/at/json/
鏈変簺璧勬簮绔欑殑閲囬泦鏁版嵁鏄姞瀵嗗悗鐨勫垏鐗囩墖娈碉紝鍙兘闇€瑕侀噰闆嗙珯鐗瑰畾鐨勮В鏋愭帴鍙ｏ紝闇€瑕佽嚜宸辩紪杈慾son閲岀殑parse_url灞炴€ 
璧勬簮绔欓儴鍒嗗ぇ鍒嗙被涓嬫棤鏁版嵁寰堟甯革紝鍙互鑷缂栬緫json閲宑ate_exclude灞炴€ф帓闄ゆ帀鑷繁娴嬭瘯杩囨棤鏁版嵁鐨勫垎绫 (灏忕▼搴忔棤娉曡嚜鍔ㄨ瘑鍒紝鍙兘浜哄伐娴嬪ソ鍝簺鍒嗙被鏃犳暟鎹 )
`.trim(),
    host: '',
    homeTid: '', // 棣栭〉鎺ㄨ崘銆備竴鑸～鍐欑涓€涓祫婧愮珯鐨勬兂瑕佺殑鎺ㄨ崘鍒嗙被鐨刬d.鍙互绌 
    homeUrl: '/api.php/provide/vod/?ac=detail&t={{rule.homeTid}}',
    detailUrl: '/api.php/provide/vod/?ac=detail&ids=fyid',
    searchUrl: '/api.php/provide/vod/?wd=**&pg=#TruePage##page=fypage',
    classUrl: '/api.php/provide/vod/',
    url: '/api.php/provide/vod/?ac=detail&pg=fypage&t=fyfilter',
    filter_url: '{{fl.绫诲瀷}}',
    headers: {'User-Agent': 'MOBILE_UA'},
    timeout: 5000, // class_name: '鐢靛奖&鐢佃鍓 &缁艰壓&鍔ㄦ极',
    limit: 20,
    search_limit: 5, // 鎼滅储闄愬埗鍙栧墠5涓紝鍙互娉ㄩ噴鎺夛紝灏变笉闄愬埗鎼滅储
    searchable: 1,//鏄惁鍚敤鍏ㄥ眬鎼滅储,
    quickSearch: 0,//鏄惁鍚敤蹇€熸悳绱 ,
    filterable: 1,//鏄惁鍚敤鍒嗙被绛涢€ ,
    play_parse: true,
    parse_url: '', // 杩欎釜鍙傛暟鏆傛椂涓嶈捣浣滅敤銆傝仛鍚堢被鐨勬瘡涓祫婧愬簲璇ユ湁鑷繁鐙珛鐨勮В鏋愬彛銆傚崟鐙厤缃湪閲囬泦.json閲岀殑parse_url鏈夋晥
    search_match: false, // 鎼滅储绮惧噯鍖归厤
    search_pic: true, // 鎼滅储寮哄埗闇€瑕佸浘鐗 
    // params: 'http://127.0.0.1:5707/files/json/%E9%87%87%E9%9B%86.json',
    // params: 'http://127.0.0.1:5707/files/json/閲囬泦闈欐€ .json$1',
    // params: 'http://127.0.0.1:5707/files/json/閲囬泦[zy]闈欐€ .json$1',
    // hostJs:$js.toString(()=>{
    //
    // }),
    棰勫鐞 : $js.toString(() => {
        function getClasses(item) {
            let classes = [];
            if (item.class_name && item.class_url) {
                if (!/&|鐢靛奖|鐢佃鍓缁艰壓|鍔ㄦ极[\u4E00-\u9FA5]+/.test(item.class_name)) {
                    try {
                        item.class_name = ungzip(item.class_name)
                    } catch (e) {
                        log(`涓嶈瘑鍒殑class_name瀵艰嚧gzip瑙ｇ爜澶辫触:${e}`)
                        return classes
                    }
                }
                let names = item.class_name.split('&');
                let urls = item.class_url.split('&');
                let cnt = Math.min(names.length, urls.length);
                for (let i = 0; i < cnt; i++) {
                    classes.push({
                        'type_id': urls[i],
                        'type_name': names[i]
                    });
                }
            }
            return classes
        }

        if (typeof (batchFetch) === 'function') {
            // 鏀寔鎵归噺璇锋眰鐩存帴鏀鹃鑷垜銆傛悳绱㈤檺鍒舵渶澶х嚎绋嬫暟閲 16
            rule.search_limit = 16;
            log('褰撳墠绋嬪簭鏀寔鎵归噺璇锋眰[batchFetch],鎼滅储闄愬埗宸茶缃负16');
        }
        let _url = rule.params;
        log(`浼犲叆鍙傛暟:${_url}`);
        if (_url && typeof (_url) === 'string' && /^(http|file)/.test(_url)) {
            if (_url.includes('$')) {
                let _url_params = _url.split('$');
                _url = _url_params[0];
                rule.search_match = !!(_url_params[1]);
                if (_url_params.length > 2) { // 寮哄埗鍥剧墖
                    rule.search_pic = !!(_url_params[2]);
                }
            }
            let html = request(_url);
            let json = JSON.parse(html);
            let _classes = [];
            rule.filter = {};
            rule.filter_def = {};
            json.forEach(it => {
                let _obj = {
                    type_name: it.name,
                    type_id: it.url,
                    parse_url: it.parse_url || '',
                    searchable: it.searchable !== 0,
                    api: it.api || '',
                    cate_exclude: it.cate_exclude || '',
                    // class_name: it.class_name || '',
                    // class_url: it.class_url || '',
                };
                _classes.push(_obj);
                try {
                    let json1 = [];
                    if (it.class_name && it.class_url) {
                        json1 = getClasses(it);
                    } else {
                        json1 = JSON.parse(request(urljoin(_obj.type_id, _obj.api || rule.classUrl))).class;
                    }
                    if (_obj.cate_exclude) {
                        json1 = json1.filter(cl => !new RegExp(_obj.cate_exclude, 'i').test(cl.type_name));
                    }
                    rule.filter[_obj.type_id] = [{
                        "key": "绫诲瀷", "name": "绫诲瀷", "value": json1.map(i => {
                            return {"n": i.type_name, 'v': i.type_id}
                        })
                    }];
                    if (json1.length > 0) {
                        rule.filter_def[it.url] = {"绫诲瀷": json1[0].type_id};
                    }
                } catch (e) {
                    rule.filter[it.url] = [{"key": "绫诲瀷", "name": "绫诲瀷", "value": [{"n": "鍏ㄩ儴", "v": ""}]}];
                }
            });
            rule.classes = _classes;
        }
    }),
    // class_parse: $js.toString(() => {
    //     let _url = rule.params;
    //     if (_url && typeof (_url) === 'string' && _url.startsWith('http')) {
    //         let html = request(_url);
    //         let json = JSON.parse(html);
    //         let _classes = [];
    //         homeObj.filter = {};
    //         rule.filter_def = {};
    //         json.forEach(it => {
    //             let _obj = {
    //                 type_name: it.name,
    //                 type_id: it.url,
    //                 parse_url: it.parse_url || '',
    //                 cate_exclude: it.cate_exclude || '',
    //             };
    //             _classes.push(_obj);
    //             try {
    //                 let json1 = JSON.parse(request(urljoin(_obj.type_id, rule.classUrl))).class;
    //                 if (_obj.cate_exclude) {
    //                     json1 = json1.filter(cl => !new RegExp(_obj.cate_exclude, 'i').test(cl.type_name));
    //                 }
    //                 homeObj.filter[_obj.type_id] = [{
    //                     "key": "绫诲瀷", "name": "绫诲瀷", "value": json1.map(i => {
    //                         return {"n": i.type_name, 'v': i.type_id}
    //                     })
    //                 }];
    //                 if (json1.length > 0) {
    //                     rule.filter_def[it.url] = {"绫诲瀷": json1[0].type_id};
    //                 }
    //             } catch (e) {
    //                 homeObj.filter[it.url] = [{"key": "绫诲瀷", "name": "绫诲瀷", "value": [{"n": "鍏ㄩ儴", "v": ""}]}];
    //             }
    //         });
    //         rule.classes = _classes;
    //         input = _classes;
    //     }
    // }),
    class_parse: $js.toString(() => {
        input = rule.classes;
    }),
    鎺ㄨ崘: $js.toString(() => {
        let update_info = [{
            vod_name: '鏇存柊鏃ュ織',
            vod_id: 'update_info',
            vod_remarks: `鐗堟湰:${rule.version}`,
            vod_pic: 'https://ghproxy.net/https://raw.githubusercontent.com/hjdhnx/hipy-server/master/app/static/img/logo.png'
        }];
        VODS = [];
        if (rule.classes) {
            let randomClass = getRandomItem(rule.classes);
            let _url = urljoin(randomClass.type_id, input);
            if (randomClass.api) {
                _url = _url.replace('/api.php/provide/vod/', randomClass.api)
            }
            try {
                let html = request(_url, {timeout: rule.timeout});
                let json = JSON.parse(html);
                VODS = json.list;
                VODS.forEach(it => {
                    it.vod_id = randomClass.type_id + '$' + it.vod_id;
                    it.vod_remarks = it.vod_remarks + '|' + randomClass.type_name;
                });
            } catch (e) {
            }
        }
        VODS = update_info.concat(VODS);
    }),
    涓€绾 : $js.toString(() => {
        VODS = [];
        if (rule.classes) {
            // log(input);
            let _url = urljoin(MY_CATE, input);
            let current_vod = rule.classes.find(item => item.type_id === MY_CATE);
            if (current_vod && current_vod.api) {
                _url = _url.replace('/api.php/provide/vod/', current_vod.api)
            }
            let html = request(_url);
            let json = JSON.parse(html);
            VODS = json.list;
            VODS.forEach(it => {
                it.vod_id = MY_CATE + '$' + it.vod_id
            });
        }
    }),
    // 涓€绾 : 'json:list;vod_name;vod_pic;vod_remarks;vod_id;vod_play_from',
    浜岀骇: $js.toString(() => {
        VOD = {};
        if (orId === 'update_info') {
            VOD = {
                vod_content: rule.update_info.trim(),
                vod_name: '鏇存柊鏃ュ織',
                type_name: '鏇存柊鏃ュ織',
                vod_pic: 'https://resource-cdn.tuxiaobei.com/video/FtWhs2mewX_7nEuE51_k6zvg6awl.png',
                vod_remarks: `鐗堟湰:${rule.version}`,
                vod_play_from: '閬撻暱鍦ㄧ嚎',
                // vod_play_url: '鍡呮帰鎾斁$https://resource-cdn.tuxiaobei.com/video/10/8f/108fc9d1ac3f69d29a738cdc097c9018.mp4',
                vod_play_url: '闅忔満灏忚棰 $http://api.yujn.cn/api/zzxjj.php',
            };
        } else {
            if (rule.classes) {
                let _url = urljoin(fyclass, input);
                let current_vod = rule.classes.find(item => item.type_id === fyclass);
                if (current_vod && current_vod.api) {
                    _url = _url.replace('/api.php/provide/vod/', current_vod.api)
                }
                let html = request(_url);
                let json = JSON.parse(html);
                let data = json.list;
                VOD = data[0];
                if (current_vod && current_vod.type_name) {
                    VOD.vod_play_from = VOD.vod_play_from.split('$$$').map(it => current_vod.type_name + '|' + it).join('$$$')
                }
            }
        }
    }),
    鎼滅储: $js.toString(() => {
        VODS = [];
        if (rule.classes) {
            let canSearch = rule.classes.filter(it => it.searchable);
            let page = Number(MY_PAGE);
            page = (MY_PAGE - 1) % Math.ceil(canSearch.length / rule.search_limit) + 1;
            let truePage = Math.ceil(MY_PAGE / Math.ceil(canSearch.length / rule.search_limit));
            if (rule.search_limit) {
                let start = (page - 1) * rule.search_limit;
                let end = page * rule.search_limit;
                let t1 = new Date().getTime();
                let searchMode = typeof (batchFetch) === 'function' ? '鎵归噺' : '鍗曚釜';
                log('start:' + start);
                log('end:' + end);
                log('鎼滅储妯″紡:' + searchMode);
                log('绮惧噯鎼滅储:' + rule.search_match);
                // log('t1:' + t1);
                if (start < canSearch.length) {
                    let search_classes = canSearch.slice(start, end);
                    let urls = [];
                    search_classes.forEach(it => {
                        let _url = urljoin(it.type_id, input);
                        if (it.api) {
                            _url = _url.replace('/api.php/provide/vod/', it.api)
                        }
                        _url = _url.replace("#TruePage#", "" + truePage);
                        urls.push(_url);
                    });
                    let results_list = [];
                    let results = [];
                    if (typeof (batchFetch) === 'function') {
                        let reqUrls = urls.map(it => {
                            return {
                                url: it,
                                options: {timeout: rule.timeout}
                            }
                        });
                        let rets = batchFetch(reqUrls);
                        let detailUrls = [];
                        let detailUrlCount = 0;
                        rets.forEach((ret, idx) => {
                            let it = search_classes[idx];
                            if (ret) {
                                try {
                                    let json = JSON.parse(ret);
                                    let data = json.list;
                                    data.forEach(i => {
                                        i.site_name = it.type_name;
                                        i.vod_id = it.type_id + '$' + i.vod_id;
                                        i.vod_remarks = i.vod_remarks + '|' + it.type_name;
                                    });
                                    if (rule.search_match) {
                                        data = data.filter(item => item.vod_name && (new RegExp(KEY, 'i')).test(item.vod_name))
                                    }
                                    if (data.length > 0) {
                                        if (rule.search_pic && !data[0].vod_pic) {
                                            log(`褰撳墠鎼滅储绔欑偣銆 ${it.type_name}銆戞病鍥剧墖,灏濊瘯璁块棶浜岀骇鍘昏幏鍙栧浘鐗嘸);
                                            let detailUrl = urls[idx].split('wd=')[0] + 'ac=detail&ids=' + data.map(k => k.vod_id.split('$')[1]).join(',');
                                            detailUrls.push(detailUrl);
                                            results_list.push({
                                                data: data,
                                                has_pic: false,
                                                detailUrlCount: detailUrlCount
                                            });
                                            detailUrlCount++;
                                            // try {
                                            //     let detailJson = JSON.parse(request(detailUrl));
                                            //     data.forEach((d, _seq) => {
                                            //         log('浜岀骇鏁版嵁鍒楄〃鍏冪礌鏁 :' + detailJson.list.length);
                                            //         let detailVodPic = detailJson.list[_seq].vod_pic;
                                            //         if (detailVodPic) {
                                            //             Object.assign(d, {vod_pic: detailVodPic});
                                            //         }
                                            //     });
                                            // } catch (e) {
                                            //     log(`寮哄埗鑾峰彇缃戠珯${it.type_id}鐨勬悳绱㈠浘鐗囧け璐 :${e.message}`);
                                            // }
                                        } else {
                                            results_list.push({data: data, has_pic: true});

                                        }
                                        // results = results.concat(data);
                                    }
                                } catch (e) {
                                    log(`璇锋眰:${it.type_id}鍙戠敓閿欒:${e.message}`)
                                }
                            }
                        });
                        // 鏋勯€犺姹備簩绾х殑batchFetch鍒楄〃
                        let reqUrls2 = detailUrls.map(it => {
                            return {
                                url: it,
                                options: {timeout: rule.timeout}
                            }
                        });
                        let rets2 = batchFetch(reqUrls2);
                        for (let k = 0; k < results_list.length; k++) {
                            let result_data = results_list[k].data;
                            if (!results_list[k].has_pic) {
                                try {
                                    let detailJson = JSON.parse(rets2[results_list[k].detailUrlCount]);
                                    log('浜岀骇鏁版嵁鍒楄〃鍏冪礌鏁 :' + detailJson.list.length);
                                    result_data.forEach((d, _seq) => {
                                        // let detailVodPic = detailJson.list[_seq].vod_pic;
                                        // log(detailJson);
                                        let detailVodPic = detailJson.list.find(vod => vod.vod_id.toString() === d.vod_id.split('$')[1]);
                                        if (detailVodPic) {
                                            Object.assign(d, {vod_pic: detailVodPic.vod_pic});
                                        }
                                    });
                                } catch (e) {
                                    log(`寮哄埗鑾峰彇缃戠珯${result_data[0].site_name}鐨勬悳绱㈠浘鐗囧け璐 :${e.message}`);
                                }
                            }
                            results = results.concat(result_data);
                        }

                    } else {
                        urls.forEach((_url, idx) => {
                            let it = search_classes[idx];
                            try {
                                let html = request(_url);
                                let json = JSON.parse(html);
                                let data = json.list;
                                data.forEach(i => {
                                    i.vod_id = it.type_id + '$' + i.vod_id;
                                    i.vod_remarks = i.vod_remarks + '|' + it.type_name;
                                });
                                if (rule.search_match) {
                                    data = data.filter(item => item.vod_name && (new RegExp(KEY, 'i')).test(item.vod_name))
                                }
                                if (data.length > 0) {
                                    if (rule.search_pic && !data[0].vod_pic) {
                                        log(`褰撳墠鎼滅储绔欑偣銆 ${it.type_name}銆戞病鍥剧墖,灏濊瘯璁块棶浜岀骇鍘昏幏鍙栧浘鐗嘸);
                                        let detailUrl = urls[idx].split('wd=')[0] + 'ac=detail&ids=' + data.map(k => k.vod_id.split('$')[1]).join(',');
                                        try {
                                            let detailJson = JSON.parse(request(detailUrl));
                                            log('浜岀骇鏁版嵁鍒楄〃鍏冪礌鏁 :' + detailJson.list.length);
                                            data.forEach((d, _seq) => {
                                                // let detailVodPic = detailJson.list[_seq].vod_pic;
                                                let detailVodPic = detailJson.list.find(vod => vod.vod_id.toString() === d.vod_id.split('$')[1]);
                                                if (detailVodPic) {
                                                    Object.assign(d, {vod_pic: detailVodPic.vod_pic});
                                                }
                                            });
                                        } catch (e) {
                                            log(`寮哄埗鑾峰彇缃戠珯${it.type_id}鐨勬悳绱㈠浘鐗囧け璐 :${e.message}`);
                                        }
                                    }
                                    results = results.concat(data);
                                }
                                results = results.concat(data);
                            } catch (e) {
                                log(`璇锋眰:${it.type_id}鍙戠敓閿欒:${e.message}`)
                            }
                        });
                    }

                    VODS = results;
                    let t2 = new Date().getTime();
                    // log('t2:'+t2);
                    log(`${searchMode}鎼滅储:${urls.length}涓珯鑰楁椂:${(Number(t2) - Number(t1))}ms`)

                }
            }
        }
    }),
    lazy: $js.toString(() => {
        // lazy鎯冲姙娉曠敤瀵瑰簲鐨刾arse_url锛屼絾鏄湁闅惧害锛屾殏鏈疄鐜 
        let parse_url = '';
        if (flag && flag.includes('|')) {
            let type_name = flag.split('|')[0];
            let current_vod = rule.classes.find(item => item.type_name === type_name);
            if (current_vod && current_vod.parse_url) {
                parse_url = current_vod.parse_url
            }
        }
        if (/\.(m3u8|mp4)/.test(input)) {
            input = {parse: 0, url: input}
        } else {
            if (parse_url.startsWith('json:')) {
                let purl = parse_url.replace('json:', '') + input;
                let html = request(purl);
                input = {parse: 0, url: JSON.parse(html).url}
            } else {
                input = parse_url + input;
            }
        }
    }),
}